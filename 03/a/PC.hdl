// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // NOTE: 1. order matters here, since we want reset > load > inc
    //       so the actual Mux16 should happen in reverse order
    //       so that the latter ones could always override previous
    //       ones if set
    //       2. in order to preserve the previous values, we need
    //       to load default values from previous gates
    //       3. also in order for out to be updated in the next clock
    //       we need to do register at the last step, or more precisely
    //       set the out pin from a register, which guarantees the
    //       time sequential order.
    //       4. one very important property of pin, especially clocked pin:
    //       you don't have to define the (internal) input pins before using them
    //       as long as they have a definition (even later in the file), it
    //       should work. This is actualy how most of the clocked
    //       chips work. Because the actual sequential order of clocked chips
    //       is a loop in the register chip, so which comes first or not
    //       is all relative
    // === inc
    Inc16(in=pre, out=incpre);
    Mux16(a=pre, b=incpre, sel=inc, out=incout);
    // === load
    Mux16(a=incout, b=in, sel=load, out=loadout);
    // === reset
    Mux16(a=loadout, b=false, sel=reset, out=cur);
    // === feed into register to DELAY!!
    // here the output of current is fed into pre pin, as a result, loop happens
    Register(in=cur, load=true, out=pre, out=out);
}
